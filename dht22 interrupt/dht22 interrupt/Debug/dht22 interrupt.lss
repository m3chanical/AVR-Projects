
dht22 interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000162  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000038  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000314  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000173  00000000  00000000  00000532  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000019e  00000000  00000000  000006a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  0000009c  00000000  00000000  00000844  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001e9  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001d0  00000000  00000000  00000ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  00000c99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  88:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init>:
    }
}

void init(){
	// Setting up the timer:
	cli(); // disable global interrupts so we don't break our set up
  90:	f8 94       	cli
	
	TCCR1B |= (1 << CS10 | 1 << CS12); // Enable counter register with prescale of 1024.
  92:	e1 e8       	ldi	r30, 0x81	; 129
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	85 60       	ori	r24, 0x05	; 5
  9a:	80 83       	st	Z, r24
	OCR1A = 31249; // Counting 31250 cycles to equal two seconds: 16mhz / 1024 = 15625; 15625 * 2 = 31250. Timer starts at 0.
  9c:	81 e1       	ldi	r24, 0x11	; 17
  9e:	9a e7       	ldi	r25, 0x7A	; 122
  a0:	90 93 89 00 	sts	0x0089, r25
  a4:	80 93 88 00 	sts	0x0088, r24
	TCCR1B |= (1 << WGM12); // Timer/Counter1 in clear timer on compare mode
  a8:	80 81       	ld	r24, Z
  aa:	88 60       	ori	r24, 0x08	; 8
  ac:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A); // Enable timer compare interrupt
  ae:	ef e6       	ldi	r30, 0x6F	; 111
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	82 60       	ori	r24, 0x02	; 2
  b6:	80 83       	st	Z, r24
	
	// TODO: enable port B pins as output for binary LEDs. (future, use shift register maybe?);
	DDRB |= (1 << SENSOR_PIN);
  b8:	20 9a       	sbi	0x04, 0	; 4
	PORTB |= (1 << SENSOR_PIN); //Set Sensor pin as output, and pull it high.
  ba:	28 9a       	sbi	0x05, 0	; 5
	
	sei(); // Re-enable interrupts!
  bc:	78 94       	sei
  be:	08 95       	ret

000000c0 <main>:
volatile uint16_t dht_humidity; // Bytes 0 & 1 of the received data divided by 10
volatile uint16_t dht_temp; // Bytes 2 & 3 of received data divided by 10

int main(void)
{
	init(); // Initialize the chip: 
  c0:	0e 94 48 00 	call	0x90	; 0x90 <init>
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <main+0x4>

000000c6 <dht22_read>:

	//OUTPUT: low for 1-10ms, then high
	//INPUT: sensor pulls low for 80us, then high for 80us. then data transmission starts:
	
	// OUTPUT: 
	DDRB |= (1 << SENSOR_PIN); // Ensure DHT22 pin set as output: 
  c6:	20 9a       	sbi	0x04, 0	; 4
	PORTB |= (0 << SENSOR_PIN); // Set sensor pin low for 1-10ms:
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	8f e3       	ldi	r24, 0x3F	; 63
  ce:	9f e1       	ldi	r25, 0x1F	; 31
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <dht22_read+0xa>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <dht22_read+0x10>
  d6:	00 00       	nop
	_delay_ms(2); //low for 2ms
	PORTB |= (1 << SENSOR_PIN);
  d8:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	90 ea       	ldi	r25, 0xA0	; 160
  dc:	9a 95       	dec	r25
  de:	f1 f7       	brne	.-4      	; 0xdc <dht22_read+0x16>
	_delay_us(30); //high for 20-40us; 
	// INPUT: 
	DDRB &= ~(1 << SENSOR_PIN); // set sensor pin as input.
  e0:	20 98       	cbi	0x04, 0	; 4
  e2:	e5 ed       	ldi	r30, 0xD5	; 213
  e4:	ea 95       	dec	r30
  e6:	f1 f7       	brne	.-4      	; 0xe4 <dht22_read+0x1e>
  e8:	00 00       	nop
  ea:	8f ee       	ldi	r24, 0xEF	; 239
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <dht22_read+0x28>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <dht22_read+0x2e>
  f4:	00 00       	nop
  f6:	95 e0       	ldi	r25, 0x05	; 5
	
	sei(); // Re-enable interrupts!
	
}

void dht22_read(){
  f8:	28 e0       	ldi	r18, 0x08	; 8
  fa:	0a c0       	rjmp	.+20     	; 0x110 <dht22_read+0x4a>
  fc:	e7 ec       	ldi	r30, 0xC7	; 199
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <dht22_read+0x3a>
 104:	00 c0       	rjmp	.+0      	; 0x106 <dht22_read+0x40>
 106:	00 00       	nop
 108:	81 50       	subi	r24, 0x01	; 1
	/* FOR LOOPS read temperature and humidity date in from sensor. */
	for (uint8_t b = 0; b < 5; b++) { // Reading a total of five bytes from the sensor
		
		rcv_byte = 0; 
		
		for(uint8_t i = 0; i < 8; i++){ // 8 bits.
 10a:	c1 f7       	brne	.-16     	; 0xfc <dht22_read+0x36>
 10c:	91 50       	subi	r25, 0x01	; 1
		return;
	}
	// Sensor then pulls low for 80us, then high for 80us.

	/* FOR LOOPS read temperature and humidity date in from sensor. */
	for (uint8_t b = 0; b < 5; b++) { // Reading a total of five bytes from the sensor
 10e:	11 f0       	breq	.+4      	; 0x114 <dht22_read+0x4e>
	
	sei(); // Re-enable interrupts!
	
}

void dht22_read(){
 110:	82 2f       	mov	r24, r18
 112:	f4 cf       	rjmp	.-24     	; 0xfc <dht22_read+0x36>
 114:	08 95       	ret

00000116 <__vector_11>:
			_delay_us(50);		
		}
	}
}

ISR(TIMER1_COMPA_vect) {
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	2f 93       	push	r18
 122:	3f 93       	push	r19
 124:	4f 93       	push	r20
 126:	5f 93       	push	r21
 128:	6f 93       	push	r22
 12a:	7f 93       	push	r23
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
 130:	af 93       	push	r26
 132:	bf 93       	push	r27
 134:	ef 93       	push	r30
 136:	ff 93       	push	r31
	
		/* This triggers every two seconds based on the math in the init function. 
			- Purpose: Perform a read on the DHT22 sensor. 
			- Read function of sensor is called.
		*/
		dht22_read();
 138:	0e 94 63 00 	call	0xc6	; 0xc6 <dht22_read>
 13c:	ff 91       	pop	r31
 13e:	ef 91       	pop	r30
 140:	bf 91       	pop	r27
 142:	af 91       	pop	r26
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	7f 91       	pop	r23
 14a:	6f 91       	pop	r22
 14c:	5f 91       	pop	r21
 14e:	4f 91       	pop	r20
 150:	3f 91       	pop	r19
 152:	2f 91       	pop	r18
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
