
ButtonBlink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000194  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000a2  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000062  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000d4  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000410  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000141  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000024  00000000  00000000  00000575  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  00000599  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 c8 00 	jmp	0x190	; 0x190 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
//void wait_time();

int main(void)
{
	int millis = 0;
	TCNT1 = 0; // Initialize the counter to zero. At least for now, to verify it works.
  80:	10 92 85 00 	sts	0x0085, r1
  84:	10 92 84 00 	sts	0x0084, r1
	
	// Set the following B pins as output: 
	DDRB |= ((1 << 1) | (1 << 2) | (1 << 3) | (1 << 4));
  88:	84 b1       	in	r24, 0x04	; 4
  8a:	8e 61       	ori	r24, 0x1E	; 30
  8c:	84 b9       	out	0x04, r24	; 4
	
	TCCR1B |= (1 << CS10); // Enables the counter register with no prescaling.
  8e:	e1 e8       	ldi	r30, 0x81	; 129
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	81 60       	ori	r24, 0x01	; 1
  96:	80 83       	st	Z, r24
//#include <util/delay.h>
//void wait_time();

int main(void)
{
	int millis = 0;
  98:	c0 e0       	ldi	r28, 0x00	; 0
  9a:	d0 e0       	ldi	r29, 0x00	; 0
	
	TCCR1B |= (1 << CS10); // Enables the counter register with no prescaling.

    while(1)
    {
		while(TCNT1 <= 15999){ // Really really hacky way of waiting one millisecond. 
  9c:	e4 e8       	ldi	r30, 0x84	; 132
  9e:	f0 e0       	ldi	r31, 0x00	; 0
		}
		TCNT1 = 0; // Still hacky.
		millis ++; // Stop being so hacky. 
		
		// Toggle the LEDs!
		if(millis % 125 == 0){
  a0:	0f 2e       	mov	r0, r31
  a2:	fd e7       	ldi	r31, 0x7D	; 125
  a4:	af 2e       	mov	r10, r31
  a6:	b1 2c       	mov	r11, r1
  a8:	f0 2d       	mov	r31, r0
			PORTB ^= (1 << 1);
  aa:	68 94       	set
  ac:	77 24       	eor	r7, r7
  ae:	71 f8       	bld	r7, 1
		} 
		if (millis % 250 == 0){
  b0:	0f 2e       	mov	r0, r31
  b2:	fa ef       	ldi	r31, 0xFA	; 250
  b4:	cf 2e       	mov	r12, r31
  b6:	d1 2c       	mov	r13, r1
  b8:	f0 2d       	mov	r31, r0
			PORTB ^= (1 << 2);
  ba:	68 94       	set
  bc:	88 24       	eor	r8, r8
  be:	82 f8       	bld	r8, 2
		} 
		if (millis % 500 == 0){
  c0:	0f 2e       	mov	r0, r31
  c2:	f4 ef       	ldi	r31, 0xF4	; 244
  c4:	ef 2e       	mov	r14, r31
  c6:	ff 24       	eor	r15, r15
  c8:	f3 94       	inc	r15
  ca:	f0 2d       	mov	r31, r0
			PORTB ^= (1 << 3);
  cc:	68 94       	set
  ce:	99 24       	eor	r9, r9
  d0:	93 f8       	bld	r9, 3
		} 
		if (millis % 1000 == 0){
  d2:	08 ee       	ldi	r16, 0xE8	; 232
  d4:	13 e0       	ldi	r17, 0x03	; 3
			PORTB ^= (1 << 4);
  d6:	40 e1       	ldi	r20, 0x10	; 16
  d8:	02 c0       	rjmp	.+4      	; 0xde <main+0x5e>
		}
		
		if (millis >= 1000) {
			millis = 0;
  da:	c0 e0       	ldi	r28, 0x00	; 0
  dc:	d0 e0       	ldi	r29, 0x00	; 0
	
	TCCR1B |= (1 << CS10); // Enables the counter register with no prescaling.

    while(1)
    {
		while(TCNT1 <= 15999){ // Really really hacky way of waiting one millisecond. 
  de:	20 81       	ld	r18, Z
  e0:	31 81       	ldd	r19, Z+1	; 0x01
  e2:	20 38       	cpi	r18, 0x80	; 128
  e4:	3e 43       	sbci	r19, 0x3E	; 62
  e6:	d8 f3       	brcs	.-10     	; 0xde <main+0x5e>
			
		}
		TCNT1 = 0; // Still hacky.
  e8:	11 82       	std	Z+1, r1	; 0x01
  ea:	10 82       	st	Z, r1
		millis ++; // Stop being so hacky. 
  ec:	21 96       	adiw	r28, 0x01	; 1
		
		// Toggle the LEDs!
		if(millis % 125 == 0){
  ee:	ce 01       	movw	r24, r28
  f0:	b5 01       	movw	r22, r10
  f2:	0e 94 a0 00 	call	0x140	; 0x140 <__divmodhi4>
  f6:	89 2b       	or	r24, r25
  f8:	19 f4       	brne	.+6      	; 0x100 <main+0x80>
			PORTB ^= (1 << 1);
  fa:	85 b1       	in	r24, 0x05	; 5
  fc:	87 25       	eor	r24, r7
  fe:	85 b9       	out	0x05, r24	; 5
		} 
		if (millis % 250 == 0){
 100:	ce 01       	movw	r24, r28
 102:	b6 01       	movw	r22, r12
 104:	0e 94 a0 00 	call	0x140	; 0x140 <__divmodhi4>
 108:	89 2b       	or	r24, r25
 10a:	19 f4       	brne	.+6      	; 0x112 <main+0x92>
			PORTB ^= (1 << 2);
 10c:	85 b1       	in	r24, 0x05	; 5
 10e:	88 25       	eor	r24, r8
 110:	85 b9       	out	0x05, r24	; 5
		} 
		if (millis % 500 == 0){
 112:	ce 01       	movw	r24, r28
 114:	b7 01       	movw	r22, r14
 116:	0e 94 a0 00 	call	0x140	; 0x140 <__divmodhi4>
 11a:	89 2b       	or	r24, r25
 11c:	19 f4       	brne	.+6      	; 0x124 <main+0xa4>
			PORTB ^= (1 << 3);
 11e:	85 b1       	in	r24, 0x05	; 5
 120:	89 25       	eor	r24, r9
 122:	85 b9       	out	0x05, r24	; 5
		} 
		if (millis % 1000 == 0){
 124:	ce 01       	movw	r24, r28
 126:	b8 01       	movw	r22, r16
 128:	0e 94 a0 00 	call	0x140	; 0x140 <__divmodhi4>
 12c:	89 2b       	or	r24, r25
 12e:	19 f4       	brne	.+6      	; 0x136 <main+0xb6>
			PORTB ^= (1 << 4);
 130:	85 b1       	in	r24, 0x05	; 5
 132:	84 27       	eor	r24, r20
 134:	85 b9       	out	0x05, r24	; 5
		}
		
		if (millis >= 1000) {
 136:	c8 3e       	cpi	r28, 0xE8	; 232
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	d8 07       	cpc	r29, r24
 13c:	74 f6       	brge	.-100    	; 0xda <main+0x5a>
 13e:	cf cf       	rjmp	.-98     	; 0xde <main+0x5e>

00000140 <__divmodhi4>:
 140:	97 fb       	bst	r25, 7
 142:	07 2e       	mov	r0, r23
 144:	16 f4       	brtc	.+4      	; 0x14a <__divmodhi4+0xa>
 146:	00 94       	com	r0
 148:	07 d0       	rcall	.+14     	; 0x158 <__divmodhi4_neg1>
 14a:	77 fd       	sbrc	r23, 7
 14c:	09 d0       	rcall	.+18     	; 0x160 <__divmodhi4_neg2>
 14e:	0e 94 b4 00 	call	0x168	; 0x168 <__udivmodhi4>
 152:	07 fc       	sbrc	r0, 7
 154:	05 d0       	rcall	.+10     	; 0x160 <__divmodhi4_neg2>
 156:	3e f4       	brtc	.+14     	; 0x166 <__divmodhi4_exit>

00000158 <__divmodhi4_neg1>:
 158:	90 95       	com	r25
 15a:	81 95       	neg	r24
 15c:	9f 4f       	sbci	r25, 0xFF	; 255
 15e:	08 95       	ret

00000160 <__divmodhi4_neg2>:
 160:	70 95       	com	r23
 162:	61 95       	neg	r22
 164:	7f 4f       	sbci	r23, 0xFF	; 255

00000166 <__divmodhi4_exit>:
 166:	08 95       	ret

00000168 <__udivmodhi4>:
 168:	aa 1b       	sub	r26, r26
 16a:	bb 1b       	sub	r27, r27
 16c:	51 e1       	ldi	r21, 0x11	; 17
 16e:	07 c0       	rjmp	.+14     	; 0x17e <__udivmodhi4_ep>

00000170 <__udivmodhi4_loop>:
 170:	aa 1f       	adc	r26, r26
 172:	bb 1f       	adc	r27, r27
 174:	a6 17       	cp	r26, r22
 176:	b7 07       	cpc	r27, r23
 178:	10 f0       	brcs	.+4      	; 0x17e <__udivmodhi4_ep>
 17a:	a6 1b       	sub	r26, r22
 17c:	b7 0b       	sbc	r27, r23

0000017e <__udivmodhi4_ep>:
 17e:	88 1f       	adc	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	5a 95       	dec	r21
 184:	a9 f7       	brne	.-22     	; 0x170 <__udivmodhi4_loop>
 186:	80 95       	com	r24
 188:	90 95       	com	r25
 18a:	bc 01       	movw	r22, r24
 18c:	cd 01       	movw	r24, r26
 18e:	08 95       	ret

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
